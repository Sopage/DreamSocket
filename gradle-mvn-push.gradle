apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: NEXUS_URL) {
                    authentication(userName: NEXUS_USER_NAME, password: NEXUS_PASSWORD)
                }
                snapshotRepository(url: NEXUS_SNAPSHOT_URL) {
                    authentication(userName: NEXUS_USER_NAME, password: NEXUS_PASSWORD)
                }
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }
                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task javadocs(type: Javadoc) {
        options{
            encoding 'UTF-8'
            charSet 'UTF-8'
            author true
            version true
        }
        source = sourceSets.main.java.srcDirs
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadocs) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts{
        archives sourcesJar
        archives javadocJar
    }
}